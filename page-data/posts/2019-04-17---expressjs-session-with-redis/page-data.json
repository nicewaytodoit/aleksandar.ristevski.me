{"componentChunkName":"component---src-templates-post-template-jsx","path":"/posts/2019-04-17---expressjs-session-with-redis/","result":{"data":{"site":{"siteMetadata":{"title":"Blog & Profile by Aleksandar Ristevski","subtitle":"Any sufficiently advanced technology is indistinguishable from magic.","copyright":"All rights reserved <br> Copyright © 2018 - 2021","author":{"name":"Aleksandar Ristevski","twitter":"@nicewaytodoit"},"disqusShortname":"","siteUrl":"https://nicewaytodoit.github.io/aleksandar.ristevski.me"}},"markdownRemark":{"id":"9ee05f75-8cb5-5a50-a28a-f9f496fdf8fc","html":"<p>The issue with managing session in memory even in the local environment is that each time there is a memory leak or application crashes users will need to log on again, which is not a good user experience.</p>\n<p>A better way to deal with session is to have a Redis NoSql server to manage those sessions.</p>\n<p>First, we will explore how to install on Windows 10 and deal with the Linux version. Please have in mind that Redis does not officially support Windows port and that Redis version we are going to install is few years old, but it is still usable for local purposes.</p>\n<h2>Redis on Windows 10</h2>\n<p>To install Windows version of Redis go to Microsoft archive: <a href=\"https://github.com/microsoftarchive/redisrangeses\">https://github.com/microsoftarchive/redis/releases</a></p>\n<p>From there click on the Assets link and download <a href=\"https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.zip\">zip file</a></p>\n<p>After downloading unzip the package to your custom folder.</p>\n<p>To run Redis server double click on <code class=\"language-text\">redis-server.exe</code> file.</p>\n<p>If you want to set up authentication, you will need to modify <code class=\"language-text\">redis.windows.conf</code> file. </p>\n<p>Remove <code class=\"language-text\">#</code>, to uncomment the line with <code class=\"language-text\">requirepass</code> parameter and for the second word set whatever you would like to be your password. </p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">requirepass foobarpass</code></pre></div>\n<p>To run Redis after modifying the config file, you will need to run <code class=\"language-text\">redis-server.exe Redis.windows.conf</code>.\nIf everything is done correctly, Redis will show a message about running on the localhost address 127.0.0.1, and port 6379.\nPlease do not turn off command prompt windows as it is not a windows service, but running as a server on-demand.</p>\n<p>At this point, this is enough to try out Redis client. Just double click on <code class=\"language-text\">redis-cli.exe</code> and command prompt will show with prompt.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span></code></pre></div>\n<p>First thing you can do is to type command <code class=\"language-text\">ping</code> and Redis service will respond with <code class=\"language-text\">PONG</code> message, meaning the Redis service is listening.  </p>\n<p>If the password is changed, you will need to enter an authentication command before doing anything else.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">AUTH foobarpass</code></pre></div>\n<p>We can now enter a few commands to verify that Redis is working.</p>\n<p>First, we will try to list all keys with <code class=\"language-text\">keys *</code>.</p>\n<p>Next, we will create a new key: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">SET testKey <span class=\"token string\">\"Hello\"</span></code></pre></div>\n<p>And then check is it there:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">GET testKey</code></pre></div>\n<p>Next, let’s enter an array:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">lpush cars Tesla Nissan Toyota</code></pre></div>\n<p>To retrieve values:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">lrange cars <span class=\"token number\">0</span> -1</code></pre></div>\n<h2>Express.js session with Redis</h2>\n<p>Having in mind that you already have an application with Express.js in-memory application, I will jump straight to essential bits you need to add.</p>\n<p>Firstly, you need to install additional Redis packages for the node project, saving dependencies into <code class=\"language-text\">package.json</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save redis connect-redis</code></pre></div>\n<p>Then you need to add below code to your <code class=\"language-text\">server.js</code> application file.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> redisConnection  <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    host<span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token operator\">:</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span>\n    ttl<span class=\"token operator\">:</span> <span class=\"token number\">86400</span><span class=\"token punctuation\">,</span>\n    no_ready_check<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">'foobarpass'</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> redis <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> redisClient <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">createClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>redisConnection<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> redisStore <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect-redis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nredisClient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Redis error: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nredisClient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Redis connected!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'SessionIdName'</span><span class=\"token punctuation\">,</span>\n        secret<span class=\"token operator\">:</span> <span class=\"token string\">'SomeSessionPasswordForRedis'</span><span class=\"token punctuation\">,</span>\n        resave<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        saveUninitialized<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        cookie<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> secure<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        store<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">redisStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>redisConnection<span class=\"token punctuation\">,</span>\n            client<span class=\"token operator\">:</span> redisClient \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Above code will initialize Redis client and session management with Redis. </p>\n<p>A good thing about this approach is that it can save even if you scale your project to the multiple machines. One more thing to remember is that Redis can run purely in-memory mode, that means that although your application is fail-safe when it crushes, unfortunately, if Redis crashes users will lose their sessions. That being said, it is possible to adjust Redis to save keys to the hard drive at the cost of little of bit of speed.</p>\n<h2>GUI for Redis on Windows</h2>\n<p>If you need GUI version of CLI tool for Redis you can check <a href=\"https://github.com/qishibo/AnotherRedisDesktopManager\">Another Redis Desktop Manager</a></p>\n<h2>Installing Redis on Linux and Continous runner</h2>\n<p>We need to update our local apt package cache first and then install Redis:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> redis-server</code></pre></div>\n<p>After Redis is installed, we will need to do a few tweaks in <code class=\"language-text\">redis.conf</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/redis/redis.conf</code></pre></div>\n<p>Configure the password as like in the Windows example above:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">requirepass foobarpass</code></pre></div>\n<p>And then change <code class=\"language-text\">supervised</code> parameter from:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">supervised no </code></pre></div>\n<p>to </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">supervised systemd</code></pre></div>\n<p>After we save <code class=\"language-text\">redis.conf</code> file we need to restart Redis service and check status:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart redis.service\n<span class=\"token function\">sudo</span> systemctl status redis</code></pre></div>\n<p>If service is running correctly, we can fire-up the Redis client.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">redis-cli</code></pre></div>\n<p>and check as previous few commands <code class=\"language-text\">ping</code>, <code class=\"language-text\">set</code>, <code class=\"language-text\">get</code>, <code class=\"language-text\">keys</code> as before.</p>\n<p>Finally, we need to check that Redis is only running on the localhost with:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">netstat</span> -lnp <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> redis</code></pre></div>\n<p>If not, we need to make sure that bind in <code class=\"language-text\">redis.conf</code> is set to <code class=\"language-text\">127.0.0.1:: 1</code>. </p>\n<p>For more check the following Digital Ocean <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-18-04\">article</a>. </p>","fields":{"tagSlugs":["/tags/redis/","/tags/java-script/","/tags/node-js/","/tags/express-js/","/tags/session/"]},"timeToRead":4,"frontmatter":{"title":"Express.js Session with Redis","tags":["Redis","JavaScript","Node.js","Express.js","Session"],"date":"2019-04-17T19:26:34.987","description":"This is a tutorial on how to set up a session with the Node.js/Express.js and Redis."}}},"pageContext":{"slug":"/posts/2019-04-17---expressjs-session-with-redis/"}},"staticQueryHashes":[]}