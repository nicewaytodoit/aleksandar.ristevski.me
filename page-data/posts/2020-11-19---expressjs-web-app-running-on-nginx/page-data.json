{"componentChunkName":"component---src-templates-post-template-jsx","path":"/posts/2020-11-19---expressjs-web-app-running-on-nginx/","result":{"data":{"site":{"siteMetadata":{"title":"Blog & Profile by Aleksandar Ristevski","subtitle":"Any sufficiently advanced technology is indistinguishable from magic.","copyright":"All rights reserved <br> Copyright © 2018 - 2021","author":{"name":"Aleksandar Ristevski","twitter":"@nicewaytodoit"},"disqusShortname":"","siteUrl":"https://nicewaytodoit.github.io/aleksandar.ristevski.me"}},"markdownRemark":{"id":"46a66328-faeb-527f-8513-613216d12923","html":"<p>Without too many introductory words, let quickly jump onto necessary steps to make an Express.js web application up and running on Nginx.</p>\n<p>In the <code class=\"language-text\">/var/www</code> or whatever is your web applications content folder, create a folder with the name of your web application <code class=\"language-text\">letit.buzz</code> and then clone <code class=\"language-text\">Starter ExpressJS app</code> we will use to test. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> letit.buzz/\n$ <span class=\"token function\">git</span> clone https://github.com/nicewaytodoit/expressjs-starter-app.git ./\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre></div>\n<p>After the application is cloned and built we need to configure our Nginx server. Jump to <code class=\"language-text\">/etc/nginx/</code> and find the <code class=\"language-text\">nginx.conf</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> /etc/nginx/\n$ <span class=\"token function\">nano</span> /etc/nginx/nginx.conf</code></pre></div>\n<p>Use your favorite text editor and add the line <code class=\"language-text\">server 127.0.0.1:8001;</code> to the <code class=\"language-text\">upstream nodes</code> block, which is part of the <code class=\"language-text\">http</code> configuration block.\nNotice the line before last <code class=\"language-text\">include sites-available/*;</code> - it is an instruction to link other config files, this is in case that you are running multiple web sites on your server.  </p>\n<div class=\"gatsby-highlight\" data-language=\"config\"><pre class=\"language-config\"><code class=\"language-config\">http {\n  ...\n\n  upstream nodes {\n      # letit.buzz\n      server 127.0.0.1:8001;\n      ...\n  }\n  include sites-available/*;\n}</code></pre></div>\n<p>Now, let’s jump to the <code class=\"language-text\">/etc/nginx/sites-available/</code> folder and create an Nginx config file for the “Let It Buzz” web application, we will name it <code class=\"language-text\">letit.buzz.conf</code>. Keep the Nginx config name similar to the folder name. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> sites-available/\n$ <span class=\"token function\">touch</span> letit.buzz.conf\n$ <span class=\"token function\">nano</span> letit.buzz.conf</code></pre></div>\n<p>Inside of the Nginx config file <code class=\"language-text\">/etc/nginx/sites-available/letit.buzz.conf</code> enter the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"config\"><pre class=\"language-config\"><code class=\"language-config\">server {\n   listen 80;\n   server_name letit.buzz www.letit.buzz;\n   \n   access_log /var/log/nginx/letit.access.log;\n   error_log /var/log/nginx/letit.error.log error;\n   \n   root /var/www/letit.buzz;\n\n   location / {\n       proxy_set_header Host letit.buzz;\n       proxy_pass http://localhost:8001;\n       proxy_http_version 1.1;\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection &#39;upgrade&#39;;\n       proxy_set_header Host $host;\n       proxy_cache_bypass $http_upgrade;\n   }\n}</code></pre></div>\n<p>Notice that we use port: 8001. Save the changes and do not forget to restart Nginx server <code class=\"language-text\">sudo service nginx restart</code>. </p>\n<p>All is done, so let’s test the application. Go to the application root folder and run ‘npm start’ additional param can be anything it is just there if we want to test multiple application on different ports, testing with the same example, in that way we can distinguish them.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> /var/www/letit.buzz/\n$ <span class=\"token function\">npm</span> start -- LetITbuzz</code></pre></div>\n<p>Now, while the application is running you will get the log message that the application is ‘Listening on the port 8001’ if that is not the case, you will need to change the port to correspond to the one you have set in the Nginx config files.\nSo, in your application folder edit the <code class=\"language-text\">/var/www/letit.buzz/app.js</code> file and change the following line <code class=\"language-text\">const port = process.env.PORT || 3000;</code> instead of 3000 enter 8001. Save changes and re-run the application with the <code class=\"language-text\">npm start</code>.</p>\n<p>Now, hopefully, if the application is running, how to test it?</p>\n<p>Leave the SSH shell as it is (running the app). If you running GUI in your Linux distribution you can open the browser and type <code class=\"language-text\">http://localhost:8001</code> if not then try <code class=\"language-text\">wget http://localhost:8001</code> which will download the index.html file. Both in the browser or after opening the downloaded file with <code class=\"language-text\">cat index.html</code> you will find the message similar to:</p>\n<blockquote>\n<p>Hello World ExpressJS: App  <b>“LetITbuzz”</b> : 25/12/2020 18:53</p>\n</blockquote>\n<p>Leave the <code class=\"language-text\">npm start</code>-ed application running.</p>\n<p>If DNS settings for the A record (* and @) of your domain provider are set correctly to the public IP address *(<code class=\"language-text\">101.102.103.105</code>) of your server as: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">A * 101.102.103.105 15 Minutes\nA @ 101.102.103.105 15 Minutes</code></pre></div>\n<p>You are all good to go if everything is correctly done after typing <a href=\"http://www.letit.buzz\">http://www.letit.buzz</a> in any browser in the world you should get the same message.</p>\n<p>Now, this is a temporary setup just to quickly check that the entire structure is running. For the more permanent solution you will need some kind of tool to ensuring that a given web application running continuously - check <a href=\"https://www.npmjs.com/package/forever\">Forever</a>.</p>","fields":{"tagSlugs":["/tags/node-js/","/tags/express-js/","/tags/nginx/","/tags/learning/","/tags/linux/"]},"timeToRead":3,"frontmatter":{"title":"Express.js web app running on Nginx","tags":["NodeJS","ExpressJS","Nginx","Learning","Linux"],"date":"2020-11-19T09:47:00.000Z","description":"Quick tutorial on how to set up a web application with Node.js and Express.js running on Nginx."}}},"pageContext":{"slug":"/posts/2020-11-19---expressjs-web-app-running-on-nginx/"}},"staticQueryHashes":[]}