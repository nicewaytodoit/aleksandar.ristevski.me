{"componentChunkName":"component---src-templates-post-template-jsx","path":"/posts/2020-11-04---multiple-apps-with-forever-bash/","result":{"data":{"site":{"siteMetadata":{"title":"Blog & Profile by Aleksandar Ristevski","subtitle":"Any sufficiently advanced technology is indistinguishable from magic.","copyright":"All rights reserved <br> Copyright © 2018 - 2021","author":{"name":"Aleksandar Ristevski","twitter":"@nicewaytodoit"},"disqusShortname":"","siteUrl":"https://nicewaytodoit.github.io/aleksandar.ristevski.me"}},"markdownRemark":{"id":"2dda32ab-6fee-52ec-84c7-9d7a6999ef78","html":"<p><a href=\"https://www.npmjs.com/package/forever\">Forever</a> is a simple CLI (command-line interface) tool made to ensure that a given Node.js app is running continuously. As this article is long overdue, and in the author’s own words “For new installations we encourage you to use <code class=\"language-text\">pm2</code> or <code class=\"language-text\">nodemon</code> ”, obviously there are a much better tool out there, anyway I decided to share a simple automation bash script used to start multiple forever processes.  </p>\n<p>First, you need to have globally installed Forever, which, if you reading these lines I assume, you already have.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> forever -g</code></pre></div>\n<p>So, create a bash <code class=\"language-text\">.sh</code> file and name it for instance <code class=\"language-text\">run-it-forever.sh</code> and as a content paste the following script:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\nforever stopall\n\n<span class=\"token assign-left variable\">arr</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"over-priced.io\"</span> <span class=\"token string\">\"letit.buzz\"</span> <span class=\"token string\">\"fun-with-bars.org\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">${arr<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>}</span>\"</span>\n<span class=\"token keyword\">do</span>\n   <span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"forever -o out.log -e err.log start -c node <span class=\"token variable\">$i</span>/bin/www \"</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>To have an executable script you will need to have <code class=\"language-text\">#!/bin/bash</code> at the top. And you will need to run command <code class=\"language-text\">chmod u+x run-it-forever.sh</code> to make a <code class=\"language-text\">.sh</code> file executable.</p>\n<p>In order to run this successfully each application will need to have its own folder (as normally it should be) and the usual <code class=\"language-text\">server.js</code> or <code class=\"language-text\">app.js</code> main file needs to be placed in <code class=\"language-text\">bin/www</code>. Notice that the last <code class=\"language-text\">www</code> is not a folder but JavaScript <code class=\"language-text\">.js</code> file without extension. Why did I name it like that? To be honest, I do not know, it was a long time ago and at the time I think I had some “good” reason to do it. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd /var/www/over-priced.io/bin/www\n$ cd /var/www/123you-n-me.com/bin/www\n...</code></pre></div>\n<p>Run bash script with <code class=\"language-text\">./run-it-forever.sh</code> or <code class=\"language-text\">sudo ./run-it-forever.sh</code>. </p>\n<p>The script will stop all existing applications first with the <code class=\"language-text\">forever stopall</code> command and then restart all apps listed in the array.\nPlease have in mind that this is not an ideal solution for a production environment, especially when you have a high number of users that depend on server memory sessions (as they may lose their work if you do not have implemented some persistent session solution using Redis or similar). </p>\n<p>In the end, it is worth mentioning that there is a global log for forever, but each application will have its own log in Apache or Nginx config files for fine-grain logs.</p>","fields":{"tagSlugs":["/tags/node-js/","/tags/express-js/","/tags/forever/","/tags/bash/","/tags/linux/"]},"timeToRead":2,"frontmatter":{"title":"Multiple apps with Forever using bash","tags":["NodeJS","ExpressJS","Forever","Bash","Linux"],"date":"2020-11-04T07:11:00.000Z","description":"This small article explains how to start multiple apps with Forever continuous process runner using Bash."}}},"pageContext":{"slug":"/posts/2020-11-04---multiple-apps-with-forever-bash/"}},"staticQueryHashes":[]}