{"version":3,"sources":["webpack:///./src/components/Post/index.jsx","webpack:///./src/components/CategoryTemplateDetails/index.jsx","webpack:///./src/templates/category-template.jsx"],"names":["Post","render","data","this","props","node","frontmatter","title","date","category","description","page","fields","slug","categorySlug","className","to","dateTime","moment","format","formatDate","toUpperCase","formatReadingTime","timeToRead","key","React","Component","CategoryTemplateDetails","items","pageContext","allMarkdownRemark","edges","forEach","post","push","CategoryTemplate","site","siteMetadata","Layout","Helmet","Sidebar"],"mappings":"qNAMMA,E,kGACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KADD,EAOHA,EAAKG,KAAKC,YAJZC,EAHK,EAGLA,MACAC,EAJK,EAILA,KACAC,EALK,EAKLA,SACAC,EANK,EAMLA,YAEIC,EAAOT,EAAKG,KARX,EASwBH,EAAKG,KAAKO,OAAjCC,EATD,EASCA,KAAMC,EATP,EASOA,aAEd,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,sBACZ,kBAAC,OAAD,CAAMA,UAAU,mBAAmBC,GAAIH,GACpCN,IAGL,yBAAKQ,UAAU,uBACb,0BACEA,UAAU,kBACVE,SAAUC,IAAOV,GAAMW,OAAO,iBAFhC,GAIMC,YAAWT,EAAKL,YAAYE,KAAM,eAAea,eAEvD,0BAAMN,UAAU,sBAAhB,OAPF,GAQMO,YAAkBX,EAAKY,YAC3B,0BAAMR,UAAU,sBAAhB,OACA,0BAAMA,UAAU,sBAAsBS,IAAKV,GACzC,kBAAC,OAAD,CAAME,GAAIF,EAAcC,UAAU,4BAC/BN,KAIP,uBAAGM,UAAU,4BACVL,GAEH,uBAAGK,UAAU,YACX,kBAAC,OAAD,CAAMA,UAAU,iBAAiBC,GAAIH,GAArC,W,GAvCSY,IAAMC,WAgDV1B,O,8HC5BA2B,E,kGAtBb1B,OAAA,WACE,IAAM2B,EAAQ,GACNxB,EAAUD,KAAVC,MACAK,EAAaL,EAAMyB,YAAnBpB,SAMR,OALcL,EAAMF,KAAK4B,kBAAkBC,MACrCC,SAAQ,SAAAC,GACZL,EAAMM,KAAK,kBAAClC,EAAA,EAAD,CAAME,KAAM+B,EAAMT,IAAKS,EAAK5B,KAAKO,OAAOC,WAInD,yBAAKE,UAAU,WACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,eAAeN,GAC7B,yBAAKM,UAAU,cAAca,O,GAfHH,IAAMC,WCItCS,E,kGACJlC,OAAA,WAAU,IAAD,EACuBE,KAAKC,MAA3BF,EADD,EACCA,KAAM2B,EADP,EACOA,YACNtB,EAAUL,EAAKkC,KAAKC,aAApB9B,MACAE,EAAaoB,EAAbpB,SAER,OACE,kBAAC6B,EAAA,EAAD,KACE,6BACE,kBAACC,EAAA,EAAD,CAAQhC,MAAUE,EAAL,MAAmBF,IAChC,kBAACiC,EAAA,EAAYrC,KAAKC,OAClB,kBAAC,EAA4BD,KAAKC,U,GAXbqB,IAAMC,WAkBtBS","file":"component---src-templates-category-template-jsx-54535897a9c71c958795.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport moment from 'moment';\nimport './style.scss';\nimport { formatReadingTime, formatDate } from '../../utils/helpers';\n\nclass Post extends React.Component {\n  render() {\n    const { data } = this.props;\n    const {\n      title,\n      date,\n      category,\n      description,\n    } = data.node.frontmatter;\n    const page = data.node;\n    const { slug, categorySlug } = data.node.fields;\n\n    return (\n      <div className=\"post\">\n        <h2 className=\"post__title mgbt-0\">\n          <Link className=\"post__title-link\" to={slug}>\n            {title}\n          </Link>\n        </h2>\n        <div className=\"post__meta mgbt-0-5\">\n          <time\n            className=\"post__meta-time\"\n            dateTime={moment(date).format('MMMM D, YYYY')}\n          >\n            {`${formatDate(page.frontmatter.date, 'DD MMM YYYY').toUpperCase()}`}\n          </time>\n          <span className=\"post__meta-divider\"> • </span>\n          {`${formatReadingTime(page.timeToRead)}`}\n          <span className=\"post__meta-divider\"> • </span>\n          <span className=\"post__meta-category\" key={categorySlug}>\n            <Link to={categorySlug} className=\"post__meta-category-link\">\n              {category}\n            </Link>\n          </span>\n        </div>\n        <p className=\"post__description mgbt-0\">\n          {description}\n        </p>\n        <p className=\"mgbt-0-5\">\n          <Link className=\"post__readmore\" to={slug}>\n          Read\n          </Link>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React from 'react';\nimport Post from '../Post';\n\nclass CategoryTemplateDetails extends React.Component {\n  render() {\n    const items = [];\n    const { props } = this;\n    const { category } = props.pageContext;\n    const posts = props.data.allMarkdownRemark.edges;\n    posts.forEach(post => {\n      items.push(<Post data={post} key={post.node.fields.slug} />);\n    });\n\n    return (\n      <div className=\"content\">\n        <div className=\"content__inner\">\n          <div className=\"page\">\n            <h1 className=\"page__title\">{category}</h1>\n            <div className=\"page__body\">{items}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CategoryTemplateDetails;\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport Sidebar from '../components/Sidebar';\nimport CategoryTemplateDetails from '../components/CategoryTemplateDetails';\n\nclass CategoryTemplate extends React.Component {\n  render() {\n    const { data, pageContext } = this.props;\n    const { title } = data.site.siteMetadata;\n    const { category } = pageContext;\n\n    return (\n      <Layout>\n        <div>\n          <Helmet title={`${category} - ${title}`} />\n          <Sidebar {...this.props} />\n          <CategoryTemplateDetails {...this.props} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default CategoryTemplate;\n\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    site {\n      siteMetadata {\n        title\n        subtitle\n        copyright\n        menu {\n          label\n          path\n          title\n        }\n        author {\n          name\n          email\n          linkedin\n          twitter\n          github\n          rss\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      filter: {\n        frontmatter: {\n          category: { eq: $category }\n          layout: { eq: \"post\" }\n          draft: { ne: true }\n        }\n      }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date\n            category\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}